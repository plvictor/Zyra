// Aplicação de Chat em Tempo Real
// Um exemplo da linguagem Zyra

import ChatRoom from "./components/ChatRoom";
import LoginForm from "./components/LoginForm";

// Modelo de dados para usuários e mensagens
model User {
  id: uuid primary;
  username: text unique;
  avatarUrl: text;
  isOnline: boolean default true;
  lastActive: timestamp;
}

model Message {
  id: uuid primary;
  content: text;
  timestamp: timestamp default now();
  userId: uuid foreign(User.id);
}

// Componente principal da aplicação
component App {
  state isLoggedIn = false;
  state currentUser = null;
  
  // Função chamada quando o usuário faz login
  function handleLogin(username) {
    // Criar ou buscar usuário
    let user = db.User.findOrCreate({
      where: { username: username },
      defaults: {
        avatarUrl: "https://api.dicebear.com/6.x/avataaars/svg?seed=" + username
      }
    });
    
    // Atualizar estado
    currentUser = user;
    isLoggedIn = true;
    
    // Notificar outros usuários
    broadcast("userJoined", {
      username: user.username,
      avatarUrl: user.avatarUrl
    });
  }
  
  // Função chamada quando o usuário sai
  function handleLogout() {
    if (currentUser) {
      // Atualizar status do usuário
      db.User.update({
        isOnline: false,
        lastActive: now()
      }, {
        where: { id: currentUser.id }
      });
      
      // Notificar outros usuários
      broadcast("userLeft", {
        username: currentUser.username
      });
      
      // Limpar estado
      isLoggedIn = false;
      currentUser = null;
    }
  }
  
  // Renderização condicional baseada no estado de login
  render {
    container {
      layout: column;
      width: 100%;
      height: 100vh;
      
      if ($isLoggedIn) {
        ChatRoom {
          user: $currentUser;
          onLogout: handleLogout();
        }
      } else {
        LoginForm {
          onLogin: handleLogin;
        }
      }
    }
  }
}

// Configuração do servidor
server {
  port: 3000;
  
  // Manipuladores de eventos
  on("connect", socket) {
    console.log("Novo cliente conectado: " + socket.id);
  }
  
  on("disconnect", socket) {
    // Verificar se o usuário estava logado
    if (socket.data.userId) {
      db.User.update({
        isOnline: false,
        lastActive: now()
      }, {
        where: { id: socket.data.userId }
      });
      
      broadcast("userLeft", {
        username: socket.data.username
      });
    }
  }
  
  // Manipulador para novas mensagens
  on("sendMessage", data, socket) {
    // Validar dados
    if (!data.content || data.content.trim() === "") {
      return { error: "Mensagem vazia não permitida" };
    }
    
    // Armazenar mensagem no banco de dados
    let message = db.Message.create({
      content: data.content,
      userId: socket.data.userId
    });
    
    // Transmitir para todos os clientes, incluindo detalhes do usuário
    let user = db.User.findOne({
      where: { id: socket.data.userId }
    });
    
    broadcast("newMessage", {
      id: message.id,
      content: message.content,
      timestamp: message.timestamp,
      user: {
        username: user.username,
        avatarUrl: user.avatarUrl
      }
    });
    
    return { success: true };
  }
  
  // API para carregar mensagens anteriores
  api("/api/messages") {
    method: "GET";
    
    handler(req, res) {
      let limit = req.query.limit || 50;
      let messages = db.Message.findAll({
        limit: limit,
        order: [["timestamp", "DESC"]],
        include: [{
          model: db.User,
          attributes: ["username", "avatarUrl"]
        }]
      });
      
      return messages;
    }
  }
}

// Configuração da aplicação
app {
  title: "Zyra Chat";
  description: "Aplicação de chat em tempo real com Zyra";
  theme: {
    primaryColor: "#2a6bcc",
    secondaryColor: "#4dabf5",
    backgroundColor: "#f5f5f5",
    textColor: "#333333",
    fontFamily: "Roboto, sans-serif"
  };
  
  // Componente raiz
  root: App;
} 
// Professional Zyra Web Application Example
// E-commerce Platform

import { ThemeProvider, themes } from "./themes";
import { AuthProvider } from "./auth";
import { CartProvider } from "./cart";
import { ProductsProvider } from "./products";
import { NotificationsProvider } from "./notifications";
import { AppRouter } from "./router";
import { i18n } from "./i18n";

// Global store for application state
store AppStore {
  // Authentication state
  state user: Optional<User> = null;
  state isLoading: boolean = false;
  state error: Optional<string> = null;
  
  // Theme state
  state theme: "light" | "dark" = "light";
  
  // Locale state
  state locale: string = "en-US";
  
  // Cart state
  state cart: Cart = {
    items: [],
    total: 0,
    shipping: 0,
    tax: 0
  };
  
  // Auth actions
  action login(credentials: Credentials): Promise<boolean> {
    this.isLoading = true;
    this.error = null;
    
    try {
      const user = await auth.login(credentials);
      this.user = user;
      return true;
    } catch (error) {
      this.error = error.message;
      return false;
    } finally {
      this.isLoading = false;
    }
  }
  
  action logout() {
    auth.logout();
    this.user = null;
  }
  
  // Theme actions
  action toggleTheme() {
    this.theme = this.theme === "light" ? "dark" : "light";
    localStorage.setItem("theme", this.theme);
  }
  
  // Locale actions
  action setLocale(locale: string) {
    this.locale = locale;
    i18n.changeLanguage(locale);
    localStorage.setItem("locale", locale);
  }
  
  // Cart actions
  action addToCart(product: Product, quantity: number = 1) {
    const existingItem = this.cart.items.find(item => item.product.id === product.id);
    
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      this.cart.items.push({ product, quantity });
    }
    
    this.updateCartTotals();
    this.saveCart();
  }
  
  action removeFromCart(productId: string) {
    this.cart.items = this.cart.items.filter(item => item.product.id !== productId);
    this.updateCartTotals();
    this.saveCart();
  }
  
  action updateCartQuantity(productId: string, quantity: number) {
    const item = this.cart.items.find(item => item.product.id === productId);
    
    if (item) {
      item.quantity = quantity;
      this.updateCartTotals();
      this.saveCart();
    }
  }
  
  action clearCart() {
    this.cart = {
      items: [],
      total: 0,
      shipping: 0,
      tax: 0
    };
    
    localStorage.removeItem("cart");
  }
  
  // Private methods
  private function updateCartTotals() {
    const subtotal = this.cart.items.reduce(
      (sum, item) => sum + (item.product.price * item.quantity), 
      0
    );
    
    const shipping = subtotal > 100 ? 0 : 10;
    const tax = subtotal * 0.07;
    
    this.cart.total = subtotal;
    this.cart.shipping = shipping;
    this.cart.tax = tax;
  }
  
  private function saveCart() {
    localStorage.setItem("cart", JSON.stringify(this.cart));
  }
  
  // Initialization
  function init() {
    // Load saved theme
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme) {
      this.theme = savedTheme;
    } else {
      // Use system preference
      const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      this.theme = prefersDark ? "dark" : "light";
    }
    
    // Load saved locale
    const savedLocale = localStorage.getItem("locale");
    if (savedLocale) {
      this.locale = savedLocale;
      i18n.changeLanguage(savedLocale);
    }
    
    // Load saved cart
    const savedCart = localStorage.getItem("cart");
    if (savedCart) {
      this.cart = JSON.parse(savedCart);
    }
    
    // Check for existing session
    auth.checkSession().then(user => {
      if (user) {
        this.user = user;
      }
    });
  }
}

// Main application component
component App {
  inject store: AppStore;
  
  onMount() {
    // Initialize store
    store.init();
    
    // Set up analytics
    analytics.init({
      trackPageViews: true,
      trackClicks: true,
      trackErrors: true
    });
    
    // Register service worker for PWA
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker.register("/service-worker.js");
    }
  }
  
  render {
    <ThemeProvider theme={store.theme}>
      <AuthProvider>
        <CartProvider>
          <ProductsProvider>
            <NotificationsProvider>
              <div class="app-container">
                <AppRouter />
              </div>
            </NotificationsProvider>
          </ProductsProvider>
        </CartProvider>
      </AuthProvider>
    </ThemeProvider>
  }
}

// Database models
model User {
  id: UUID primary;
  email: string unique;
  passwordHash: string;
  firstName: string;
  lastName: string;
  role: "customer" | "admin" default "customer";
  addresses: relation<Address> one-to-many;
  orders: relation<Order> one-to-many;
  createdAt: timestamp default now();
  updatedAt: timestamp default now() onUpdate now();
  
  // Indexes
  index email;
  
  // Validations
  validate email matches /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$/;
  
  // Methods
  function getFullName(): string {
    return `${this.firstName} ${this.lastName}`;
  }
}

model Product {
  id: UUID primary;
  name: string;
  description: string;
  price: decimal;
  salePrice: Optional<decimal>;
  stock: number;
  images: Array<string>;
  category: relation<Category> many-to-one;
  tags: relation<Tag> many-to-many;
  reviews: relation<Review> one-to-many;
  createdAt: timestamp default now();
  updatedAt: timestamp default now() onUpdate now();
  
  // Indexes
  index name;
  index [category, price];
  index description fulltext;
  
  // Methods
  function getCurrentPrice(): decimal {
    return this.salePrice || this.price;
  }
  
  function getDiscountPercentage(): Optional<number> {
    if (!this.salePrice) return null;
    return Math.round((1 - (this.salePrice / this.price)) * 100);
  }
  
  function isInStock(): boolean {
    return this.stock > 0;
  }
}

model Order {
  id: UUID primary;
  user: relation<User> many-to-one;
  items: relation<OrderItem> one-to-many;
  status: "pending" | "processing" | "shipped" | "delivered" | "cancelled" default "pending";
  shippingAddress: relation<Address> many-to-one;
  paymentMethod: string;
  subtotal: decimal;
  shipping: decimal;
  tax: decimal;
  total: decimal;
  createdAt: timestamp default now();
  updatedAt: timestamp default now() onUpdate now();
  
  // Indexes
  index [user, status];
  index createdAt;
}

// API endpoints
api {
  // Products API
  route "/api/products" {
    get() {
      const { category, search, sort, page = 1, limit = 20 } = request.query;
      
      let query = db.Product.query();
      
      if (category) {
        query = query.where("category.id", category);
      }
      
      if (search) {
        query = query.search(search);
      }
      
      if (sort) {
        const [field, order] = sort.split(":");
        query = query.orderBy(field, order || "asc");
      } else {
        query = query.orderBy("createdAt", "desc");
      }
      
      const offset = (page - 1) * limit;
      const products = await query.limit(limit).offset(offset).include("category");
      const total = await query.count();
      
      return {
        products,
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit)
        }
      };
    }
    
    get("/:id") {
      const { id } = request.params;
      const product = await db.Product.findById(id).include("category", "reviews");
      
      if (!product) {
        throw new NotFoundError("Product not found");
      }
      
      return product;
    }
    
    @authorize("admin")
    post() {
      const data = request.body;
      const product = await db.Product.create(data);
      return product;
    }
    
    @authorize("admin")
    put("/:id") {
      const { id } = request.params;
      const data = request.body;
      const product = await db.Product.findById(id);
      
      if (!product) {
        throw new NotFoundError("Product not found");
      }
      
      await product.update(data);
      return product;
    }
    
    @authorize("admin")
    delete("/:id") {
      const { id } = request.params;
      const product = await db.Product.findById(id);
      
      if (!product) {
        throw new NotFoundError("Product not found");
      }
      
      await product.delete();
      return { success: true };
    }
  }
  
  // Orders API
  route "/api/orders" {
    @authorize()
    get() {
      const orders = await db.Order.findAll({
        where: { user: currentUser.id },
        orderBy: { createdAt: "desc" },
        include: ["items.product"]
      });
      
      return orders;
    }
    
    @authorize()
    get("/:id") {
      const { id } = request.params;
      const order = await db.Order.findOne({
        where: { 
          id,
          user: currentUser.id 
        },
        include: ["items.product", "shippingAddress"]
      });
      
      if (!order) {
        throw new NotFoundError("Order not found");
      }
      
      return order;
    }
    
    @authorize()
    post() {
      const data = request.body;
      
      // Check inventory
      for (const item of data.items) {
        const product = await db.Product.findById(item.productId);
        
        if (!product) {
          throw new BadRequestError(`Product ${item.productId} not found`);
        }
        
        if (product.stock < item.quantity) {
          throw new BadRequestError(`Not enough stock for ${product.name}`);
        }
      }
      
      // Create order
      const order = await db.Order.create({
        ...data,
        user: currentUser.id
      });
      
      // Update inventory
      for (const item of data.items) {
        await db.Product.update(
          { id: item.productId },
          { stock: db.raw(`stock - ${item.quantity}`) }
        );
      }
      
      // Send email
      await email.send({
        to: currentUser.email,
        template: "order-confirmation",
        data: { order }
      });
      
      return order;
    }
  }
  
  // Auth API
  route "/api/auth" {
    post("/login") {
      const { email, password } = request.body;
      
      // Find user
      const user = await db.User.findOne({ where: { email }});
      
      if (!user) {
        throw new UnauthorizedError("Invalid credentials");
      }
      
      // Verify password
      const isValid = await bcrypt.compare(password, user.passwordHash);
      
      if (!isValid) {
        throw new UnauthorizedError("Invalid credentials");
      }
      
      // Generate token
      const token = jwt.sign(
        { id: user.id, role: user.role },
        config.jwtSecret,
        { expiresIn: "7d" }
      );
      
      return {
        user: {
          id: user.id,
          email: user.email,
          firstName: user.firstName,
          lastName: user.lastName,
          role: user.role
        },
        token
      };
    }
    
    post("/register") {
      const { email, password, firstName, lastName } = request.body;
      
      // Check if user exists
      const existingUser = await db.User.findOne({ where: { email }});
      
      if (existingUser) {
        throw new BadRequestError("Email already in use");
      }
      
      // Hash password
      const passwordHash = await bcrypt.hash(password, 10);
      
      // Create user
      const user = await db.User.create({
        email,
        passwordHash,
        firstName,
        lastName
      });
      
      // Generate token
      const token = jwt.sign(
        { id: user.id, role: user.role },
        config.jwtSecret,
        { expiresIn: "7d" }
      );
      
      // Send welcome email
      await email.send({
        to: email,
        template: "welcome",
        data: { firstName }
      });
      
      return {
        user: {
          id: user.id,
          email: user.email,
          firstName: user.firstName,
          lastName: user.lastName,
          role: user.role
        },
        token
      };
    }
  }
}

// Start the application
new App(); 